import org.gradle.api.artifacts.maven.MavenDeployment

version = '1.00'
group = 'ru.yandex.android.tools'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

def isDevBuild
def isCiBuild
def isReleaseBuild

//set build variables based on build type (release, continuous integration, development)
if (hasProperty("teamcity")) {
    if(teamcity.containsKey("release")) {
        isReleaseBuild = true
        logger.info("This is RELEASE build")
    } else if (teamcity.containsKey("ci")) {
        isCiBuild = true
        version += "-SNAPSHOT"
        logger.info("This is CONTINUOUS INTEGRATION build")
    }
    else {
        isDevBuild = true
        logger.info("This is DEVELOPMENT build")
    }
}
else {
    isDevBuild = true
    logger.info("This is DEVELOPMENT build")
}

repositories {
    ivy{name "local"; url 'file://' + new File(System.getProperty('user.home'), '.yandex/ivy-repo').absolutePath}
    mavenCentral()
}

dependencies {
    compile gradleApi()
    groovy localGroovy()
}

// custom tasks for creating source jar
task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
// custom tasks for creating javadoc jar
task groovydocJar(type: Jar, dependsOn:groovydoc) {
	classifier = 'javadoc'
    from groovydoc.destinationDir
}
// add the jars as artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives groovydocJar
}

if (isReleaseBuild) {
    signing {
        if (isReleaseBuild && project.properties.containsKey('teamcity')) {
            project.setProperty("signing.keyId", teamcity['signing.keyId'])
            project.setProperty("signing.password", teamcity['signing.password'])
            project.setProperty("signing.secretKeyRingFile", teamcity['signing.secretKeyRingFile'])

            sign configurations.archives
        }
    }
}
else {
    task signArchives{
        // do nothing
    }
}

uploadArchives {
   repositories {
       if (isDevBuild) {
           add project.repositories.local
       }
       else {
           mavenDeployer {
               if (isReleaseBuild) {
                   beforeDeployment { MavenDeployment deployment -> signPom(deployment) }
               }

               auth = { authentication(userName: teamcity['maven.username'], password: teamcity['maven.password']) }
               repository(url: teamcity['maven.repository'], auth)
               snapshotRepository(url: teamcity['maven.snapshotRepository'], auth)

               pom.project {

                   parent{
                       groupId 'org.sonatype.oss'
                       artifactId 'oss-parent'
                       version '7'
                   }

                   modelVersion '4.0.0'
                   name 'Yandex :: Gradle Android plugin'
                   description 'Plugin gives an opportunity to build application library and android application which has dependence on it.'
                   url 'https://github.com/yandexmobile/gradle-android-plugin'

                   licenses {
                       license {
                           name 'The Apache Software License, Version 2.0'
                           url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                           distribution 'repo'
                       }
                   }

                   scm {
                       connection 'scm:git://github.com/yandexmobile/gradle-android-plugin.git'
                       developerConnection 'scm:git:git@github.com:yandexmobile/gradle-android-plugin.git'
                       url 'https://github.com/yandexmobile/gradle-android-plugin.git'
                   }

                   developers {
                       developer {
                           name 'Vladimir Grachev'
                           url 'https://github.com/vgrachev'
                           roles {
                               role 'Developer'
                               role 'Contributor'
                           }
                       }
                   }
               }
           }
       }
   }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}

// Make sure all code is compiled, tested and checked before uploadArchives.
uploadArchives.dependsOn ':build'